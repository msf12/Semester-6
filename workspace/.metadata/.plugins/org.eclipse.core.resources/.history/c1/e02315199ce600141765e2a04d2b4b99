import java.util.Arrays;


public class SegmentedMM {
	
	private final int MEMSIZE;
	
	private class MemChunk implements Comparable {
		
		private int fAddress, size; //location in memory and size
		private boolean empty; //is there a process here
		
		public MemChunk(int fAddress, int size)
		{
			this.fAddress = fAddress;
			this.size = size;
			empty = true;
		}
		
		public int compareTo(Object arg0) {
			MemChunk other = (MemChunk)arg0;
			if(other.empty && !this.empty)
				return 1;
			else if(this.empty && !other.empty)
				return -1;
			else if(this.empty && other.empty)
			{
				if(this.size > other.size)
					return 1;
				else if(this.size < other.size)
					return -1;
				else
					return 0;
			}
			else
				return 0;
		}
			
	}
	
	public SegmentedMM(int memsize)
	{
		MEMSIZE = memsize;
	}
	
	public int segmentAllocate(int pid, int text_size, int data_size, int heap_size)
	{
		int allocated = -1; //was allocation successful
		int[] addresses = new int[3]; //three memory addresses for the process
		
		int[] sizes = new int[]{text_size,data_size,heap_size}; //array made for easy size sorting of the three segments
		Arrays.sort(sizes);
		
		for(int i = 0,j=0; memory.get(i).empty; i++) //iterate through memory - since the segments are sorted
		{
			MemChunk temp = memory.get(i);
			if(temp.size >= sizes[j])
			{
				memory.add(new MemChunk(temp.fAddress,sizes[j]));
				if(temp.fAddress+sizes[j] == temp.fAddress+temp.size)
					memory.remove(temp);
				else
					temp.fAddress += sizes[j];
				
			}
		}
		
		table.add(pid, addresses);
		return allocated;
	}

}
