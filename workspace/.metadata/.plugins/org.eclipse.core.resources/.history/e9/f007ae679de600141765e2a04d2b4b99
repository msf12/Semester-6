import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;


public class SegmentedMM {
	
	private final int MEMSIZE;
	private List<Hole> memory;
	
	private class Hole implements Comparable {
		
		private int fAddress, size; //location in memory and size
		private boolean empty; //is there a process here
		
		public Hole(int fAddress, int size)
		{
			this.fAddress = fAddress;
			this.size = size;
			empty = true;
		}
		
		public int compareTo(Object arg0) {
			Hole other = (Hole)arg0;
			if(other.empty && !this.empty)
				return 1;
			else if(this.empty && !other.empty)
				return -1;
			else if(this.empty && other.empty)
			{
				if(this.size > other.size)
					return 1;
				else if(this.size < other.size)
					return -1;
				else
					return 0;
			}
			else
				return 0;
		}
			
	}
	
	public SegmentedMM(int memsize)
	{
		MEMSIZE = memsize;
		memory = new ArrayList<Hole>();
		memory.add(new Hole(0,memsize));
	}
	
	public int allocate(int pid, int text_size, int data_size, int heap_size)
	{
		int allocated = -1; //was allocation successful
		int[] addresses = new int[3]; //three memory addresses for the process
		int[] sizes = new int[]{text_size,data_size,heap_size};
		int[] order = new int[3];
		
		if(sizes[0] < sizes[1])
			order[1]++;
		else
			order[0]++;
		if(sizes[1] < sizes[2])
			order[2]++;
		
		table.add(pid, addresses);
		return allocated;
	}

}
